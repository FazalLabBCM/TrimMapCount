#!/usr/bin/env bash


set -e
unset PYTHONPATH
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8


# SET DEFAULT ARGUMENTS
SCRIPTDIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd)
PIPELINEDIR=$(dirname "${SCRIPTDIR}")
source "${PIPELINEDIR}"/CONFIG
source "${SCRIPTDIR}"/AdditionalScripts/FORMATTING


# PARSE COMMAND LINE ARGUMENTS
while [[ $# -gt 0 ]]
do
  case "${1}" in
    -h|--help)
      echo "${RED}____________${END}"
      echo "${RED}TrimMapCount${END}"
      echo "${RED}‾‾‾‾‾‾‾‾‾‾‾‾${END}"
      echo "Trim, map, and count FASTQ reads with icSHAPE (${LINK}https://github.com/qczhang/icSHAPE${END}), "
      echo "STAR (${LINK}https://github.com/alexdobin/STAR${END}), and HTSeq (${LINK}https://github.com/htseq/htseq${END})."
      echo ""
      echo "For help using the TrimMapCount pipeline, visit "
      echo "${LINK}https://fazallabbcm.github.io/FazalLabPipelines/${END}."
      echo ""
      echo "____________________________________________________________________________________________"
      echo "${BOLD}USAGE${END}"
      echo "  TrimMapCount ${BOLD}--option${END} <${UL}argument${END}>"
      echo ""
      echo "${BOLD}OPTIONS${END}"
      echo "  ${BOLD}-h${END}, ${BOLD}--help${END}                show this help message"
      echo ""
      echo "  ${BOLD}-r${END}, ${BOLD}--rawdata-dir${END} ${UL}DIR${END}     path to input directory where raw FASTQ files are stored"
      echo ""
      echo "  ${BOLD}-d${END}, ${BOLD}--data-dir${END} ${UL}DIR${END}        path to output directory for processed data files"
      echo "                            (default is same as raw data)"
      echo ""
      echo "  ${BOLD}-a${END}, ${BOLD}--adapter${END} ${UL}FILE${END}        if the default TruSeq adapter isn't the correct adapter for your"
      echo "                            data (TrimMapCount/scripts/icSHAPE/data/adapter/adapter.fa), you"
      echo "                            can supply the path to another adapter FASTA file for trimming"
      echo ""
      echo "  ${BOLD}-i${END}, ${BOLD}--interactive${END}         run the pipeline interactively instead of submitting a batch job"
      echo "                            (make sure to switch to an interactive node)"
      echo "‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾"
      exit 0
      ;;
    -r|--rawdata-dir)
      RAWDATADIR="${2}"
      shift
      shift
      ;;
    -d|--data-dir)
      DATADIR="${2}"
      shift
      shift
      ;;
    -a|--adapter)
      ADAPTER_FILE="${2}"
      shift
      shift
      ;;
    -i|--interactive)
      INTERACTIVE=TRUE
      shift
      ;;
    -g|--genome-dir)
      GENOMEDIR="${2}"
      shift
      shift
      ;;
    -e|--env-dir)
      ENVDIR="${2}"
      shift
      shift
      ;;
    -t|--temp-dir)
      TEMPDIR="${2}"
      shift
      shift
      ;;
    -*|--*)
      echo "Unknown option: ${1}"
      exit 1
      ;;
    *)
      echo "Unknown argument: ${1}"
      exit 1
      ;;
  esac
done


# HANDLE UNSPECIFIED ARGUMENTS
if [[ -z "${RAWDATADIR}" ]]
then
  echo "  Raw data directory not specified. Please supply path to raw data directory."
  exit 1
fi
if [[ -z "${DATADIR}" ]]
then
  DATADIR="${RAWDATADIR}"
fi
if [[ -z "${ADAPTER_FILE}" ]]
then
  ADAPTER_FILE="${SCRIPTDIR}"/icSHAPE/data/adapter/adapter.fa
fi



# PREPARE ENVIRONMENT
# Activate environment
export PATH="${ENVDIR}"/bin:"${PATH}"
# Avoid dumping too much temporary data into system tmp directory
export TMPDIR="${TEMPDIR}"
export TEMP="${TEMPDIR}"
export TMP="${TEMPDIR}"


# PRINT SETTINGS FOR USER
echo ""
echo "  Raw data directory:        ${RAWDATADIR}"
echo "  Processed data directory:  ${DATADIR}"
#echo "  Adapter file:              ${ADAPTER_FILE}"
#echo "  Genome directory:          ${GENOMEDIR}"
#echo "  Environment directory:     ${ENVDIR}"
#echo "  Temporary directory:       ${TEMPDIR}"
echo ""
if [[ "${INTERACTIVE}" == TRUE ]]
then
  echo "  Interactive mode enabled; log will display in the terminal."
else
  echo "  Log file will be created in your processed data directory."
fi
echo ""


# START PIPELINE
while true
do
  read -p "Do you wish to start the TrimMapCount pipeline? [y/n] " yn
  case $yn in
    [Yy]*)
      if [[ "${INTERACTIVE}" == TRUE ]]
      then
        # Run pipeline interactively
        "${SCRIPTDIR}"/TrimMapCount.sh "${SCRIPTDIR}" "${RAWDATADIR}" "${DATADIR}" "${GENOMEDIR}" "${ADAPTER_FILE}"
      else
        # Submit batch job
        sbatch --job-name=TrimMapCount --output="${DATADIR}"/%j.%x.log \
        "${SCRIPTDIR}"/TrimMapCount.sh "${SCRIPTDIR}" "${RAWDATADIR}" "${DATADIR}" "${GENOMEDIR}" "${ADAPTER_FILE}"
      fi
      break
      ;;
    [Nn]*)
      exit 0
      ;;
    *)
      echo "  Please answer yes or no."
      ;;
  esac
done

